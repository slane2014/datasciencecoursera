x <- x * 5
x <- x * 3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
set.seed(1)
rpois(5, 2)
?rnorm
?dnorm
?set.seed()
?ppois
?qpois
?ppois
?inverse cumulative distribution function for the Poisson distribution
?rbinom
?qpois
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class)cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
lappy(flag_colors, mean)
lapply(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(flags,length)
sapply(unique_vals,length)
sapply(flags, unique)
v
lapply(unique_vals, function(elem) elem[2])
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass,summary)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
| "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2" | country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na)
filter(cran, r_version == !is.na(cran)
filter(cran, r_version == !is.na(cran))
filter(cran, r_version == !is.na(mydf))
filter(cran, r_version == !is.na(cran)
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id:store)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country (ascending), r_version (descending), ip_id (ascending))
arrange(cran2, country, desc(r_version, ip_id
)
)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
v
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
packageVersion("sqldf")
install.packages("sqldf")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rm (cran, cran2, cran3, flag_colors, flag_shapes, flags)
rm (shape_mat)
rm (cls_list)
rm (cls_vect
)
con = url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlCode = readLines(con)
close(con)
htmlCode
sumhtmlCode[10]
sum(htmlCode[10])
sum
?sum
?count
?length
length(htmlCode[10])
?nchar
nchar[htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
url <- http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for
url <- (http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for)
url <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
read.fwf(url)
?read.fwf
read.fwf(url, widths = c(9, 8 ,8 ,8) skip = 4, )
read.fwf(url, widths = c(9, 8 ,8 ,8) skip = 4)
read.fwf(url, widths = c(9, 8 ,8 ,8), skip = 4)
head( read.fwf(url, widths = c(10, 8 ,8 ,8), skip = 4))
head( read.fwf(url, widths = c(10, 8 ,8 ,8), skip = 4), sep = "    ")
head( read.fwf(url, widths = c(10, 8 ,8 ,8), skip = 4), sep = "   ")
head( read.fwf(url, widths = c(10, 10 ,8 ,8), skip = 4))
head( read.fwf(url, widths = c(10, 7 ,8 ,8), skip = 4))
head( read.fwf(url, widths = c(10, 6, 8,8 ), skip = 4))
head( read.fwf(url, widths = c(10, , 8,8 ), skip = 4))
head( read.fwf(url, widths = c(10, 5, 8,8 ), skip = 4))
head( read.fwf(url, widths = c(10, 10, 8,8 ), skip = 4))
head( read.fwf(url, widths = c(10, 14, 8,8 ), skip = 4))
head( read.fwf(url, widths = c(10, 14, 14,8 ), skip = 4))
head( read.fwf(url, widths = c(10, 14, 14, 14, 14 ), skip = 4))
head( read.fwf(url, widths = c(10, 14, 10, 5, 10, 5, 10, 5 ), skip = 4))
head( read.fwf(url, widths = c(10, 10, 5, 10, 5, 10, 5, 10, 5 ), skip = 4))
head( read.fwf(url, widths = c(10, 19, 5, 10, 5, 10, 5, 10, 5 ), skip = 4))
head( read.fwf(url, widths = c(10, 9, 5, 10, 5, 10, 5, 10, 5 ), skip = 4))
head( read.fwf(url, widths = c(10, 9, 4, 10, 5, 10, 5, 10, 5 ), skip = 4))
head( read.fwf(url, widths = c(10, 9, 4, 9, 4, 9, 4, 9, 4 ), skip = 4))
tab <- read.fwf(url, widths = c(10, 9, 4, 9, 4, 9, 4, 9, 4 ), skip = 4)
typeof(tab)
typeof(tab[V9])
tab[V9]
tab["V9"]
sum(tab["V9"])
sum(tab["V4"])
sum(tab["V5"])
sum(tab["V6"])
tab["V4"]
head(tab["V4"])
sum(head(tab["V4"]))
sum(tab["V4"])
tail(tab["V4"])
sum(tab["V4"])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
tab <- read.fwf(url, widths = c(10, 9, 4, 9, 4, 9, 4, 9, 4 ), skip = 4)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
tab <- read.fwf(url, widths = c(10, 9, 4, 9, 4, 9, 4, 9, 4 ), skip = 4)
url <- "https://d396qusza40orc.cloudfront.net/getdata wksst8110.for"
tab <- read.fwf(url, widths = c(10, 9, 4, 9, 4, 9, 4, 9, 4 ), skip = 4)
c <- read.table("clipboard")
?oauth_endpoints
?oauth_endpoints
github <- oauth_endpoints("github")
library(httr)
github <- oauth_endpoints("github")
library(httpuv)
install.package(httpuv)
my app <- oauth_app(github,key="50:57:15:bd:73:52:ae:9f:70:ae:d0:35:26:b6:ce:04",secret = "be9b46c0748b6793a4a92e1c5d0c6afee3f8c298")
my app <- oauth_app("github", key="50:57:15:bd:73:52:ae:9f:70:ae:d0:35:26:b6:ce:04",secret = "be9b46c0748b6793a4a92e1c5d0c6afee3f8c298")
my_app <- oauth_app("github", key="50:57:15:bd:73:52:ae:9f:70:ae:d0:35:26:b6:ce:04",secret = "be9b46c0748b6793a4a92e1c5d0c6afee3f8c298")
github_token <- oauth2.0_token(github, my_app)
install.packages("httpuv")
library("httpuv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
github_token <- oauth2.0_token(github, my_app)
setwd("~/datasciencecoursera")
setwd("~/datasciencecoursera/Getting_and_Cleaning_Data")
GDP <- data.table(read.csv("GDP.csv"))
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
GDP <- data.table(read.csv("GDP.csv"))
Ed <- data.table(read.csv("ED.csv"))
rm (Ed)
ED <- data.table(read.csv("ED.csv"))
typeof(ED)
typeof(GDP)
typeof(GDP$CountryCode)
GDP$CountryCode
ED
$CountryCode
typeof(ED$CountryCode)
head(ED$CountryCode)
head(GDP$X)
length(ED$CountryCode)
length(GDP$X)
ED$CountryCode
GDP$X
head(GDP)
?intersect
intersect(ED$CountryCode, GDP$X)
length(intersect(ED$CountryCode, GDP$X))
head(ED)
str(GDP)
str(ED)
?read.csv
ED <- data.table(read.csv("ED.csv", skip=5))
head(ED)
ED <- data.table(read.csv("ED.csv")
ED <- data.table(read.csv("ED.csv"))
ED <- data.table(read.csv("ED.csv"))
head(ED)
GDP <- data.table(read.csv("GDP.csv", skip=5))
head(GDP)
GDP <- data.table(read.csv("GDP.csv", skip=4))
head(GDP)
?names
names)GDP
names(GDP)
names(GDP)[1] = "CountryCode"
names(GDP)[1] <- "CountryCode"
?setnames
setnames(GDP, 1, "CountryCode")
names(GDP)
head(GDP)
colSums(is.na(GDP))
colSums(is.na(ED))
length(GDP)
size(GDP)
ncol(GDP)
nrow(GDP)
head(GDP)
head(GDP, n=10)
head(GDP, n=100)
head(GDP, n=200)
GDP$CountryCode
ED$CountryCode
?read.csv
?merge
head(GDP)
setnames(GDP, 2, "Rank")
head(GDP)
?remove
GDP <- subset(GDP, select = -X.2)
head(GDP)
setnames(GDP, 3, "Economy")
head(GDP)
setnames(GDP, 4, "Dollars")
head(GDP)
GDP <- subset(GDP, select = -X.5)
head(GDP)
GDP <- subset(GDP, select = -X.6)
GDP <- subset(GDP, select = -X.7)
GDP <- subset(GDP, select = -X.8)
GDP <- subset(GDP, select = -X.9)
head(GDP)
head(ED)
summary(ED)
summary(GDP)
rm(tab)
?merge
GDP$Rank
?join
joined <- join(GDP, ED, by = "inner")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
joined <- join(GDP, ED, by = "inner")
joined <- join(GDP, ED, by = "CountryCode", type = inner)
joined <- join(GDP, ED, by = "CountryCode", type = "inner")
head(joined)
joined$CountryCode
factor(ED$CountryCode)
factor(GDP$CountryCode)
?overlap
?intersect
?intersect
intersect(GDP$CountryCode, ED$CountryCode)
length(intersect(GDP$CountryCode, ED$CountryCode))
ED$CountryCode
GDP$CountryCode
?factor
factor(GDP$CountryCode)
factor(GDP$CountryCode))table()
table(factor(GDP$CountryCode))
table(factor(ED$CountryCode))
table(ED$CountryCode)
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
mons = c("March","April","January","November","January",
+ "September","October","September","November","August",
+ "January","November","November","February","May","August",
+ "July","December","August","August","September","November",
+ "February","April")
mons = c("March","April","January","November","January","September","October","September","November","August",+ "January","November","November","February","May","August", + "July","December","August","August","September","November",+ "February","April")
mons = c("March","April","January","November","January","September","October","September","November","August",+ "January","November","November","February","May","August", "July","December","August","August","September","November",+ "February","April")
mons = c("March","April","January","November","January","September","October","September","November","August",+ "January","November","November","February","May","August", "July","December","August","August","September","November", "February","April")
mons = c("March","April","January","November","January","September","October","September","November","August", "January","November","November","February","May","August", "July","December","August","August","September","November", "February","April")
mons = factor(mons)
table(mons)
mons = c("March","April","January","November","January","September","October","September","November","August", "January","November","November","February","May","August", "July","December","August","August","September","November", "February","April")
mons = factor(mons)
table(mons)
rm (mons)
rm (data,fdata)
rm(joined)
tail)GDP
tail(GDP)
tail(ED
)
?merge
merged <- merge(GDP, ED, all = TRUE, by = "CountryCode")
merged
head(merged)
rm(merged)
tail(GDP)
tail(GDP, n=50)
tail(GDP, n=100)
tail(GDP, n=200)
tail(GDP, n=300)
?tail
tail(GDP, n=200L)
GDP <- data.table(read.csv("GDP.csv", skip=4, nrows=215))
tail(GDP)
GDP <- data.table(read.csv("GDP.csv", skip=4, nrows=200))
tail(GDP)
GDP <- data.table(read.csv("GDP.csv", skip=4, nrows=192))
tail(GDP)
GDP <- data.table(read.csv("GDP.csv", skip=4, nrows=190))
tail(GDP)
names(GDP)[1] = "CountryCode"
tail(GDP)
setnames(GDP, 2, "Rank")
tail(GDP)
GDP <- subset(GDP, select = -X.2)
tail(GDP)
setnames(GDP, 3, "Economy")
tail(GDP)
setnames(GDP, 4, "Dollars")
GDP <- subset(GDP, select = -X.5)
GDP <- subset(GDP, select = -X.6)
GDP <- subset(GDP, select = -X.7)
GDP <- subset(GDP, select = -X.8)
GDP <- subset(GDP, select = -X.9)
tail(GDP)
GDP
merged <- merge(GDP, ED, all = TRUE, by = "CountryCode")
head(merged)
sum(!is.na(unique(merged$rankingGDP)))
sum(!is.na(unique(merged$Rank)))
unique(merged$Rank)
?unique
!is.na(unique(merged$Rank))
?order
?order
ordered <- order(merged,
)
merged[ordered(merged$Rank),]
merged[ordered(merged$Rank), decreasing = TRUE,]
merged[ordered(merged$Rank), decreasing = TRUE),]
merged[order(merged$Rank, decreasing = TRUE),]
o <- merged[order(merged$Rank, decreasing = TRUE),]
head(o)
o[13]
> sum(!is.na(unique(merged$Rank)))
sum(!is.na(unique(merged$Rank)))
o$Income.Group
o$Income.Group
merged$Income.Group == "High income: OECD"
?subset
subset(merged, merged$Income.Group == "High income: OECD")
head(subset(merged, merged$Income.Group == "High income: OECD"))
merged(subset(merged, merged$Income.Group == "High income: OECD"))[Rank]
merged$Income.Group == "High income: OECD"
subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
subset(merged,merged$Income.Group == "High income: OECD" , select = Rank)
head(subset(merged, merged$Income.Group == "High income: OECD"))
mean(merged,merged$Income.Group == "High income: OECD" , select = Rank)
mean(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
head(subset(merged, merged$Income.Group == "High income: OECD"))
head(subset(merged, merged$Income.Group == "High income: OECD"))
head(subset(merged, merged$Income.Group == "High income: OECD"))
head(subset(merged, merged$Income.Group == "High income: OECD"))
merged$Income.Group == "High income: OECD"
subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
subset(merged,merged$Income.Group == "High income: OECD" , select = Rank)
mean(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
typeof(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank)))
typeof(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
mode(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
?unlist
unlist(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank))
typeof(unlist(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank)))
mean(unlist(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank)))
mean(unlist(subset(merged,merged$Income.Group == "High income: nonOECD" , select = Rank)))
subset(merged,merged$Income.Group == "High income: nonOECD" , select = Rank)
?subset
?unlist
?subset
!is.na(subset(merged,merged$Income.Group == "High income: nonOECD" , select = Rank))
merged$Income.Group == "High income: nonOECD"
mean(unlist(subset(merged,merged$Income.Group == "High income: nonOECD" & merged$Rank != NA, select = Rank)))
?is.na
mean(unlist(subset(merged,merged$Income.Group == "High income: nonOECD" & !is.na(merged$Rank), select = Rank)))
mean(unlist(subset(merged,merged$Income.Group == "High income: OECD" , select = Rank)))
!quartile
?
quartile
??quartile
quartile(GDP)
??quantile
?quantile
quantile(GDP)
quantile(GDP$Rank)
?table
table
table(GDP$Rank, GDP$Income.Group)
table(merged$Rank, merged$Income.Group)
table(merged$Rank, merged$Income.Group)
b <- quantile(GDP$Rank, probs = seq(0, 1, 0.2), na.rm = TRUE)
b
b <- quantile(merged$Rank, probs = seq(0, 1, 0.2), na.rm = TRUE)
b
merged$quantile <- cut(merged$Rank, breaks=breaks)
?cut
merged$quantile <- cut(merged$Rank, breaks=b)
merged$quantile
merged[Income.Group == "Lower middle income", by=c("Income.Group", "quantileGDP")]
merged[Income.Group == "Lower middle income", .N, by=c("Income.Group", "quantileGDP")]
merged[Income.Group == "Lower middle income", by=c("Income.Group", "merged$quantile")]
merged[Income.Group == "Lower middle income", by=c("Income.Group", "quantile")]
merged[Income.Group == "Lower middle income", .N, by=c("Income.Group", "quantile")]
